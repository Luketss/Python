todas as aplicações flask precisam criar uma instancia da aplicação. O web server entrega todas as requisições que ele recebe para esse objeto tratar usando 
o protocolo WSGI (web server gateway interface).

cria um objeto da classe flask > 

    from flask import Flask
    app = Flask(__name__)

clients (como web browser) enviam as requisições para o web server, que envia para a instancia da aplicação flask. A instancia precisa saber qual codigo rodar para
a url da requisição, deixando um registro das URLs para python function

A associação entre a URL e a função que ela lida com é chamado de ROUTE

the common way to define a route:

    @app.route('/')
    def index():
    return '<h1>Hello World!</h1>'

o exemplo anterior define a função index() como o handler da URL da aplicação. Se a aplicação tiver o deploy no servidor com o dominio www.testeaqui.com, a navegação
nessa url irá engatilhar a index() para rodar no servidor. O valor de return dessa função, chamado de response, é o que o cliente recebe.

Funções como index() são chamadas de view functions. o return de uma view function pode ser uma simples string com HTML, assim como coisas mais complexas.

Agora vamos a um exemplo onde a URL usa uma sintaxe dentro da route

    @app.route('/user/<name>')
    def user(name)
        return '<h1>Hello, %s</h1>' % name

Quando a View function é chamada, o Flask envia o componene dinamico como um argumento.

Flask aceita os tipos int, float e path para as routes. O path type também representa uma string mas não considera slashes

    Server Startup

A instancia da aplicação tem um metpdp run que inicia o Flask web server

    if __name__ == '__main__':
        app.run(debug=True)
    
O __name__ == '__main__' Garante que o web server só será iniciado quando o script for executado diretamente. Quando o script é importado por outro, ele assume que agora é um parent script,
fazendo com que a chamada app.run() seja pulada.

Quando o servidor é iniciado, ele entra em um loop que fica esperando por requests e services. Esse loop continua ate que a aplicação seja encerrada (Ctrl-C).

Durante o desenvolvimento é bom deixar o debug mode como true.

Caso seja digitado outra URL que não esteja especificada, a aplicação não vai saber como tratar e irá retornar um erro 404 para o navegador.

    THE REQUEST-RESPONSE CYCLE

Quando o Flask recebe uma requisição do cliente, ele precisa disponibilizar alguns objetos para que a view function trate corretamente. Um bom exemplo é o request object, que encapsula o HTTP request enviado pelo cliente.

A forma com a qual o Flask permite a view function para acessar o objeto é enviando um argumento, mas isso iria necessitar que todas as view functions na aplicação tivessem um argumento extra. Podendo ficar mais complicado caso considere que o request object não é o único objeto que a view precisa acessar para completar a requisição.

    from flask import request
    
    @app.route('/')
    def index():

    user_agent = request.headers.get('User-Agent')
    return '<p>Your browser is {}</p>'.format(user_agent)

Nesse exemplo acima, é utilizado o request como view function sendo como uma variável global.

    REQUEST DISPATCHING

Quando a aplicação recebe uma requisição do cliente, ela precisa saber qual view funciton irá chamar. Para isso, o Flask olha para a URL dada pela requisição na application URL map, que contem um mapa das URLs para tratamento da view functions.

O Flask constroi esse mapa usando o app.route decorators ou o nondecorator version app.add_url_rule().

Para ver como a URL map naquela aplicação Flask está, você pode inspecionar o map no Python shell. Para esse teste, tenha certeza que seu venv está ativado.

    (venv) $ python
    >>> from hello import app
    >>> app.url_map
    Map([<Rule '/' (HEAD, OPTIONS, GET) -> index>,
    <Rule '/static/<filename>' (HEAD, OPTIONS, GET) -> static>,
    <Rule '/user/<name>' (HEAD, OPTIONS, GET) -> user>])
O / e /user/<name> route são difinidos pelo app.route decorators na aplicação. O /static/<filename> route é uma rota especial adicionada pelo Flask para dar acesso aos arquivos static. (cap 3)
Os elementos HEAD, OPTIONS, GET exibidos na URL map são os request methods que são tratados pela route. (cap 4)


